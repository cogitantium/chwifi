#!/bin/bash
# netctl managing script for easier workday mornings and afternoons

# Change to dir of script for sourcing, following symlinks by using realpath
path="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
cd "$path"

# Check for config or setup if necessary
source setup.sh
setup

# Export config-path for usage in passwordhandler and locally
export config_path="$(config_dir)"

# Source config for user-specific variables from /etc
source "$config_path/config"

# Source helper-script for calling getcurrentpassword and updatepasswords-function
source passwordhandler.sh

connect() {
    printf "Connecting to profile: %s\n" "$1"
    "$sudo" "$network_manager" "$network_manager_connect" "$1"
}

disconnect() {
    printf "Disconnecting from profile: %s\n" "$1"
    "$sudo" "$network_manager" "$network_manager_disconnect" "$1"
}

stop_all() {
    printf "Stopping all profiles\n"
    "$sudo" "$network_manager" "$network_manager_stopall"
}

restart_profile() {
    printf "Restarting profile: %s\n" "$1"
    "$sudo" "$network_manager" "$network_manager_restart" "$1"
}

# Safely kill adapter between profiles to ensure smooth dis- and connection, also print ip link status
set_adapter_down() {
    "$sudo" ip link set "$wireless_adapter" down
}

# Disconnect and connect routine, stops all active profiles and takes connect profile as first parameter
connection_routine() {
    stop_all
    set_adapter_down
    if [[ "$macchanger_enabled" =~ ^y$ ]]; then
        change_mac
    fi
    connect "$1"
    update_routine
}

# Perl regex; find "Key=" and replace all chars after, on given line, with parameter $2, do this on file at $1
replace_password() {
    "$sudo" perl -pi -e "s/(?<=Key=).*$/$2/" "$1"
}

# Call function with two args; concatenation of $network_manager_location and profile as $1, followed by password as $2
change_profile_password() {
    replace_password "$network_manager_location""$1" "$2"
}

wait_for_network() {
    adapter_status=$(ip address show "$wireless_adapter")
    # If adapter status is down at this point, connection failed
    if [[ "$adapter_status" =~ "DOWN" ]] ; then
        printf "Could not connect, please ensure that the network is available.\n"
        exit 1
    fi
    connection_start_time=$(date +%s.%N)
    until $(curl --output /dev/null --silent --head --fail --connect-timeout 1 "$network_up_host"); do
        sleep 0.25s
    done
    connection_stop_time=$(date +%s.%N) 
    printf '%s %.3fs\n' "Connection took:" "$(bc <<< "$connection_stop_time - $connection_start_time")"
}

update_routine() {
    printf '%s\n' "Waiting for network connection..."
    wait_for_network
    printf '%s\n' "Network connection established, updating cached passwords"
    update_passwords
    if [[ $? -eq 0 ]]; then
        printf "Successfully updated cached passwords\n"
    else
        printf "Failed to update cached passwords!\n"
    fi
}

update_profiles() {
    printf '%s\n' "Updating recognised netctl profiles..."
    config=$(config_dir)
    profiles=""
    # Grab other profiles and concatenate in string, using comma as delimiter
    for entry in "/etc/netctl"/*; do
        if [ -f "$entry" ] && [[ ! "$entry" =~ ^$network_manager_work_profile$ ]] ; then
            profiles+=$(echo "$(basename $entry)")','
        fi
    done
    # Remove final comma from string
    profiles=${profiles::-1}
    # Regex other profiles into config
    sed -i "s/\"$network_manager_other_profiles\"$/\"$profiles\"/" "$config/config"
}

check_profile() {
    # Set internal field separator and read other profiles to array
    IFS=','
    read -r -a profiles <<< "$network_manager_other_profiles"
    # Reset internal field separator to default value
    IFS=' '
    # Check user input against profile array, return true if match is found, otherwise false
    for x in "${profiles[@]}"; do
        # Strip leading and trailing white spaces, in case the user manually input other profiles and included these
        x=$(echo "$x" | sed -e 's/^\s*//g')
        x=$(echo "$x" | sed -e 's/\s*$//g')
        if [ "$x" == "$1" ] ; then
            return 0
        fi
    done
    return 1
}

# Change MAC-address according to sourced options and print new MAC-address
change_mac() {
    printf "New MAC-address: "
    "$sudo" macchanger "$macchanger_options" "$wireless_adapter" | grep New | grep -o '\(\([0-9a-f]\{2\}\):\)\{5\}[0-9a-f]\{2\}'
}

display_daily_password() {
    # Get password
    password=$(get_password "$1")

    # If successful, return password, else print error-message 
    if [[ $? -eq 0 ]]; then
        printf "Daily work password is: %s\n" "$password"
    else
        printf "Password index: %s is out of range. Cannot display password\n" "$1"
    fi
}

connect_dispatch() {
    # If work, then find password, connect and update cached passwords when connection is given
    if [[ "$1" =~ ^$network_manager_work_profile$ ]]; then
        printf '%s\n' "Connecting to work, checking for cached password"
        # Grab daily password from helper
        daily_password=$(get_daily_password)

        # If no cached password, prompt for password
        if [[ $? -eq 1 ]]; then
            printf '%s' "No cached password found, input password manually: "
            read -r daily_password
        else
            # Print daily password, if found
            printf '%s\n' "Found daily work password: $daily_password"
        fi
        
        # Change work profile password and do connection routine
        change_profile_password "$network_manager_work_profile" "$daily_password"
        connection_routine "$network_manager_work_profile"
    else
        # If not work, simply connect to given profile
        printf '%s\n' "Connecting to $1"
        connection_routine "$1"
    fi 
}

display_help() {
    printf "Usage: chwifi [OPTION]... <PROFILE>\n"
    printf "Connect to any netctl wireless networks, caching rolling passwords at work\n\n"
    printf "Optional arguments:\n"
    printf "  -s, show [index|today|tomorrow]\tdisplay the daily password of the given index or day\n"
    printf "  -r, restart [profile]\t\t\trestarts the given profile\n"
    printf "  -h, --help\t\t\t\tdisplay this help and exit\n\n"
    printf "chwifi is released under GPL-2.0 and comes with ABSOLUTELY NO WARRANTY, for details read LICENSE\n"
    printf "Configuration of this script is done through the 'config' file, for documentation read README.md\n"
}

# Save arguments
args=$*

# Update recognised netctl profiles
update_profiles

# Parse all arguments
while (( "$#" )); do
    case "$1" in
        -r|restart)
            # Check if 'restart'-command argument exists and is all alphanumeric, otherwise register error
            if [[ -n "$2" ]] && [[ "$2" =~ ^[[:alnum:]]+$ ]]; then
                r_arg="$2"
            else
                err_input=1
                break
            fi
            # Shift past argument and value
            shift 2 
            ;;
        -s|show)
            # Check if 'show'-command argument exists and is either all alphas or digits, otherwise register error
            if [[ -n "$2" ]] && ([[ "$2" =~ ^[[:alpha:]]+$ ]] || [[ "$2" =~ ^[[:digit:]]+$ ]]); then
                # Check for legal input or register error and break
                case "$2" in
                    today)
                        s_arg=0
                        break
                        ;;
                    tomorrow)
                        s_arg=1
                        break
                        ;;
                    [[:digit:]])
                        s_arg="$2"
                        break
                        ;;
                    *)
                        err_input=1
                        break 2 # Break from outer case also, as error is found
                        ;;
                esac
            else # If argument is not legal register error and break
                err_input=1
                break
            fi
            # Shift pass argument and value
            shift 2
            ;;
        -h|--help)
            # Print help and exit
            display_help
            exit 0
            ;;
        *)
            # If an unrecognised argument is given, check if it is a recognised netctl profile
            if check_profile "$1" ; then
                profile=$1
            else
                # Unknown parameter, register error and break
                err_input=1
            fi
            break
            ;;
    esac
done

eval set -- "$args"

# Do error-checks first
if [[ $# -eq 0 ]]; then
    display_help
    exit 0
elif [[ -n $err_input ]]; then
    printf "Could not parse given input: '%s', please check\n" "$*"
    exit 1
fi 

# Show password if prompted
if [[ -n $s_arg ]]; then
    display_daily_password "$s_arg"
fi

# If connecting to profile, only do that and exit, else restart and exit
if [[ -n $profile ]]; then 
    connect_dispatch "$profile"
    exit 0
elif [[ -n $r_arg ]]; then
    restart_profile "$r_arg"
fi

exit 0

